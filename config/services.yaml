# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'ru'
    pathProjectLogo: '%kernel.project_dir%/public/uploads/project_logo'
    projectLogoWidth: 50
    projectLogoHeight: 50

services:
    session.handler.pdo:
        class: Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler
        arguments:
            - !service { class: PDO, factory: 'database_connection:getWrappedConnection' }
            - { lock_mode: 0 }
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventListener\UserListener:
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    App\Service\Websocket\InfoTopic:
        tags:
            - { name: gos_web_socket.topic }

    rpc_sample_service:
        class: App\Service\Websocket\InfoRpc
        tags:
            - { name: gos_web_socket.rpc }

#    App\Websocket\InfoRpc:
#        tags:
#            - { name: gos_web_socket.rpc }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    admin.project:
        class: App\Admin\ProjectAdmin
        arguments: [~, App\Entity\Project, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, label: Project }
        public: true
    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~, '@service_container']
        tags:
        - { name: sonata.admin, manager_type: orm, label: User }
        public: true
    admin.timer:
        class: App\Admin\TimerAdmin
        arguments: [~, App\Entity\Timer, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, label: Timer }
        public: true